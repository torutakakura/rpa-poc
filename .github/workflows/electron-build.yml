name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
            artifact-name: macos
          - os: ubuntu-latest  
            platform: linux
            artifact-name: linux
          - os: windows-latest
            platform: win
            artifact-name: windows

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.15.0

    # Python Agent のビルド
    - name: Build Python Agent
      working-directory: ./rpa-agent
      run: |
        python -m venv venv
        if [ "$RUNNER_OS" == "Windows" ]; then
          venv\\Scripts\\activate
        else
          source venv/bin/activate
        fi
        pip install -r requirements.txt
        pip install pyinstaller
        pyinstaller --onefile --name rpa_agent rpa_agent.py
      shell: bash

    # Electron アプリケーションの依存関係インストール
    - name: Install dependencies
      working-directory: ./rpa-electron
      run: pnpm install

    # Electron アプリケーションのビルド
    - name: Build Electron app
      working-directory: ./rpa-electron
      run: pnpm run build

    # macOS の署名とノータライズ（オプション）
    - name: Code Sign (macOS)
      if: matrix.os == 'macos-latest' && env.APPLE_ID != ''
      working-directory: ./rpa-electron
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
        CSC_LINK: ${{ secrets.MAC_CERTS }}
        CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
      run: |
        # 証明書のインポートとノータライズ設定
        echo "Signing enabled for macOS"

    # Windows の署名（オプション）
    - name: Code Sign (Windows)
      if: matrix.os == 'windows-latest' && env.WINDOWS_CERTIFICATE != ''
      working-directory: ./rpa-electron
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        echo "Signing enabled for Windows"

    # 配布用パッケージの作成
    - name: Package app
      working-directory: ./rpa-electron
      run: |
        if [ "${{ matrix.platform }}" == "mac" ]; then
          pnpm run dist:mac
        elif [ "${{ matrix.platform }}" == "linux" ]; then
          pnpm run dist:linux
        elif [ "${{ matrix.platform }}" == "win" ]; then
          pnpm run dist:win
        fi
      shell: bash

    # アーティファクトのアップロード
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          rpa-electron/release/*.dmg
          rpa-electron/release/*.zip
          rpa-electron/release/*.exe
          rpa-electron/release/*.AppImage
          rpa-electron/release/*.deb
          rpa-electron/release/*.rpm

  # リリース作成（タグプッシュ時のみ）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Upload Release Assets
      run: |
        # 各プラットフォームのアーティファクトをリリースにアップロード
        for file in macos/*.dmg windows/*.exe linux/*.AppImage linux/*.deb; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            gh release upload ${{ github.ref_name }} "$file" --clobber
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
